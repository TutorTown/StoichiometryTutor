define Problem {
	name: null,
	subgoal: null, // current subgoal
	strategies: null, // strategies still needed to solve the problem
	results: [], // names of interface elements of the results numerator and denominator
	constructor: function(strategies, results){
		this.name = "Hello";
		this.subgoal = "selectStrategy";
		this.strategies = strategies;
		this.results = results;
	}
}

// define Result {
// 	name: null,
// 	numerator_quantitiy: null,
// 	numerator_unit: null,
// 	numerator_substance: null,
// 	denominator_quantity: null,
// 	denominator_unit: null,
// 	denominator_substance: null,
// 	constructor: function(name, numerator_quantitiy, numerator_unit, numerator_substance, denominator_quantity, denominator_unit, denominator_substance) {
// 		this.name = name;
// 		this.numerator_quantitiy = numerator_quantitiy;
// 		this.numerator_unit = numerator_unit;
// 		this.numerator_substance = numerator_substance;
// 		this.denominator_quantity = denominator_quantity;
// 		this.denominator_unit = this.denominator_unit;
// 		this.denominator_substance = this.denominator_substance;
// 	}
// }

define Result {
	name: null,
	numerator: null, // numerator quantity unit substance combination
	denominator: null,	// denominator quantity unit substamce combination
	constructor: function(name, numerator, denominator) {
		this.name = name;
		this.numerator = numerator;
		this.denominator = denominator;
	}
}


define Ratio {
	name: null,
	numerator_quantitiy: null, 
	numerator_unit: null,
	denominator_quantity: null,
	denominator_unit: null,
	constructor: function(name, nq, nu, dq, du) {
		this.name = name;
		this.numerator_quantity = nq;
		this.numerator_unit = nu;
		this.denominator_quantity = dq;
		this.denominator_unit = du;
	}
}

// InterfaceElement facts are usually of the form {name, value}, where
//   the name is the selection from the student's selection-action-input, and
//   the value is student's input
define InterfaceElement {
    name: null,
	value: null,
	constructor: function(n) {
		this.name = n;
	}
}


// The following are standard types needed for the Nools model tracer.
// We recommend not changing these types.
// The StudentValues, TPA and Hint facts are the same for every tutor.

// The student's entries from the interface.
define StudentValues {
	selection: null,
	action: null,
	input: null,
	constructor: function(s,a,i) {
		this.selection = s;
		this.action = a;
		this.input = i;
	}
}

// Assert a TPA fact to set a value in a component on the student interface.
define TPA {
	selection: null,
	action: null,
	input: null,
	constructor: function(s, a, i) {
		if(Array.isArray(s)) {
			this.selection = s[0];
			this.action = s[1];
			this.input = s[2];
		} else {
			this.selection = s;
			this.action = a;
			this.input = i;
		}
	}
}

// Assert a Hint fact for each hint you want in a step.
define Hint {
	precedence: 0,
	msg: "",
	constructor: function(m, optPrecedence) {
		this.msg = m;
		this.precedence = optPrecedence || 0;
	}
}